/*
 * Copyright 2019 Google Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package private_join_and_compute;

message EncryptedSet {
  repeated EncryptedElement elements = 1;
}

message EncryptedElement {
  optional bytes element = 1;
  optional bytes associated_data = 2;
}

message ClientRoundOne {
  optional bytes public_key = 1;
  optional EncryptedSet encrypted_set = 2;
  optional EncryptedSet reencrypted_set = 3;
}

message ServerRoundOne {
  optional EncryptedSet encrypted_set = 1;
}

message ServerState {
  optional bytes ec_key = 1;
}

message ServerRoundTwo {
  optional int64 intersection_size = 1;
  optional bytes encrypted_sum = 2;
}

message ClientState {
  optional bytes p = 1;
  optional bytes q = 2;
  optional bytes ec_key = 3;
}


// For initiating the protocol.
message StartProtocolRequest {}

// gRPC interface for Private Join and Compute.
service PrivateJoinAndComputeRpc {
  // Start the protocol.
  rpc StartProtocol(StartProtocolRequest) returns (ServerRoundOne) {}

  // Execute the second round of the protocol on the server.
  rpc ExecuteServerRoundTwo(ClientRoundOne) returns (ServerRoundTwo) {}
}
